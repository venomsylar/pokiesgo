@import "01-variables";

@mixin media-breakpoint-up($breakpoint) {
	@media (min-width: $breakpoint + px) {
		@content;
	}
}

@mixin media-breakpoint-down($breakpoint) {
	@media (max-width: $breakpoint + px) {
		@content;
	}
}

@mixin media-breakpoint-between($min, $max) {
	@media (min-width: $min + px) and (max-width: $max + px) {
		@content;
	}
}

@mixin position($top, $right, $bottom, $left) {
	@if $top != false {
		top: $top;
	}
	@if $bottom != false {
		bottom: $bottom;
	}
	@if $left != false {
		left: $left;
	}
	@if $right != false {
		right: $right;
	}
}

@mixin rectangle($l) {
	width: $l;
	height: $l;
}

@mixin circle($d) {
	width: $d;
	height: $d;
	border-radius: 50%;
}

@mixin stretch($position: absolute) {
	position: $position;
	@include position(0, 0, 0, 0);
}

@mixin columns($count: 2, $gap: 0) {
	column-count: $count;
	column-gap: $gap;
}

@mixin transition($property: all, $duration: .4s, $easing: ease-in-out) {
	transition: $property $duration $easing;
}

@mixin center($horizontal: true, $vertical: true) {
	position: absolute;
	@if ($horizontal and $vertical) {
		@include position(50%, false, false, 50%);
		transform: translate(-50%, -50%);
	} @else if ($horizontal) {
		left: 50%;
		transform: translate(-50%, 0);
	} @else if ($vertical) {
		top: 50%;
		transform: translate(0, -50%);
	}
}

@function strip-units($value) {
	@return ($value / ($value * 0 + 1));
}

@function rem($pxval) {
	@if not unitless($pxval) {
		$pxval: strip-units($pxval);
	}
	$base: $font-base;
	@if not unitless($base) {
		$base: strip-units($base);
	}
	@return ($pxval / $base) * 1rem;
}

@mixin boxGrid($columnNumber, $spacingPercent, $checker:true) {
	$contentPercent: 100%;
	$sideMargin: ($spacingPercent/2);
	$marginInt: strip-units($sideMargin);
	margin: #{0} -#{$sideMargin};
	width: $contentPercent + $spacingPercent;
	@if ($checker) {
		display: flex;
		justify-content: flex-start;
		flex-flow: wrap;
		@include transition();
	}
	> * {
		width: ($contentPercent/$columnNumber) - $spacingPercent;
		margin: 0 #{$sideMargin} ($marginInt + ($marginInt / $columnNumber) * rem(1))
	}
}

@mixin plus($width, $thickness, $color) {
	&:before, &:after {
		content: '';
		position: absolute;
		transform: translate(-50%, -50%);
		@include position(50%, false, false, 20px);
		background: $color;
		@include transition();
	}
	&:after {
		width: $width+px;
		height: $thickness+px;
	}
	&:before {
		height: $width+px;
		width: $thickness+px;
	}
	&.opened {
		&:after {
			transform: translate(-50%, -50%) rotate(180deg);
		}

		&:before {
			transform: translate(-50%, -50%) rotate(90deg);
		}
	}
}

//SCSS Triangle
@mixin triangle($width:12px, $height:10px, $cl:#000, $direction: top) {
	position: absolute;
	content: '';
	@include rectangle(0);
	@if $direction == top {
		border-top: 0;
		border-left: $width solid transparent;
		border-right: $width solid transparent;
		border-bottom: $height solid $cl;
		@include position(-$height, false, false, 50%);
		transform: translateX(-50%);
	} @else if $direction == right {
		border-right: 0;
		border-top: $width solid transparent;
		border-bottom: $width solid transparent;
		border-left: $height solid $cl;
		@include position(50%, -$height, false, false);
		transform: translateY(-50%);
	} @else if $direction == bottom {
		border-bottom: 0;
		border-left: $width solid transparent;
		border-right: $width solid transparent;
		border-top: $height solid $cl;
		@include position(false, false, -$height, 50%);
		transform: translateX(-50%);
	} @else {
		border-left: 0;
		border-top: $width solid transparent;
		border-bottom: $width solid transparent;
		border-right: $height solid $cl;
		@include position(50%, false, false, -$height);
		transform: translateY(-50%);
	}
}

@mixin last-p {
	p:last-of-type {
		padding-bottom: 0
	}
}

@mixin left-right-margin {
	&:first-of-type {
		margin-left: 0;
	}
	&:last-of-type {
		margin-right: 0;
	}
}

@mixin left-right-padding {
	&:first-of-type {
		padding-left: 0;
	}
	&:last-of-type {
		padding-right: 0;
	}
}

@mixin hover {
	@media screen and (min-width: 1025px) {
		&:hover {
			@content
		}
	}
}

@mixin flex {
	display: flex;
	justify-content: space-between;
}

@mixin font($family: false, $size: false, $colour: false, $weight: false,  $lh: false, $lsp: false) {
	@if $family {
		font-family: $family;
	}
	@if $size {
		font-size: $size;
	}
	@if $colour {
		color: $colour;
	}
	@if $weight {
		font-weight: $weight;
	}
	@if $lh {
		line-height: $lh;
	}
	@if $lsp {
		letter-spacing: $lsp;
	}
}

@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
	@font-face {
		font-family: quote($font-name);
		src: url($file-name + '.woff2') format('woff2'),
		url($file-name + '.woff') format('woff'),
		url($file-name + '.ttf') format('truetype'),
		url($file-name + '.eot');
		font-weight: $weight;
		font-style: $style;
		font-display: swap;
	}
}

@mixin responsive-flex() {
	&_lg {
		@include media-breakpoint-up(1025) {
			@content;
		}
	}
	&_md {
		@include media-breakpoint-up(768) {
			@content;
		}
	}
	&_sm {
		@include media-breakpoint-up(480) {
			@content;
		}
	}
	&_wrap {
		@content;
	}
}

@mixin keyframes($name) {
	@-webkit-keyframes #{$name} {
		@content;
	}
	@-moz-keyframes #{$name} {
		@content;
	}
	@-ms-keyframes #{$name} {
		@content;
	}
	@keyframes #{$name} {
		@content;
	}
}

@mixin fixed-header($checker, $main-block-padding: false) {
	@if ($checker == true) {
		header {
			position: fixed;
			@include position(0, 0, false, 0);
		}
		#main {
			padding-top: $main-block-padding;
		}
	} @else {
		header {
			position: relative;
		}
	}
}

@mixin add-container() {
	@each $name, $container in $containers {
		.container#{$name} {
			width: $container + px;
		}
	}
	[class*="container"] {
		&:not(.fancybox-container) {
			max-width: 94%;
			margin: 0 auto;
			position: relative;
		}
	}
}

@mixin set-z-index() {
	@each $name, $zi in $z-index {
		#{$name} {
			z-index: $zi;
		}
	}
}